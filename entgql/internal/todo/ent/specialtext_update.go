// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/contrib/entgql/internal/todo/ent/predicate"
	"entgo.io/contrib/entgql/internal/todo/ent/specialtext"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SpecialTextUpdate is the builder for updating SpecialText entities.
type SpecialTextUpdate struct {
	config
	hooks    []Hook
	mutation *SpecialTextMutation
}

// Where appends a list predicates to the SpecialTextUpdate builder.
func (stu *SpecialTextUpdate) Where(ps ...predicate.SpecialText) *SpecialTextUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetContent sets the "content" field.
func (stu *SpecialTextUpdate) SetContent(s string) *SpecialTextUpdate {
	stu.mutation.SetContent(s)
	return stu
}

// Mutation returns the SpecialTextMutation object of the builder.
func (stu *SpecialTextUpdate) Mutation() *SpecialTextMutation {
	return stu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *SpecialTextUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, SpecialTextMutation](ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SpecialTextUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SpecialTextUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SpecialTextUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stu *SpecialTextUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(specialtext.Table, specialtext.Columns, sqlgraph.NewFieldSpec(specialtext.FieldID, field.TypeInt))
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.Content(); ok {
		_spec.SetField(specialtext.FieldContent, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{specialtext.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// SpecialTextUpdateOne is the builder for updating a single SpecialText entity.
type SpecialTextUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpecialTextMutation
}

// SetContent sets the "content" field.
func (stuo *SpecialTextUpdateOne) SetContent(s string) *SpecialTextUpdateOne {
	stuo.mutation.SetContent(s)
	return stuo
}

// Mutation returns the SpecialTextMutation object of the builder.
func (stuo *SpecialTextUpdateOne) Mutation() *SpecialTextMutation {
	return stuo.mutation
}

// Where appends a list predicates to the SpecialTextUpdate builder.
func (stuo *SpecialTextUpdateOne) Where(ps ...predicate.SpecialText) *SpecialTextUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *SpecialTextUpdateOne) Select(field string, fields ...string) *SpecialTextUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated SpecialText entity.
func (stuo *SpecialTextUpdateOne) Save(ctx context.Context) (*SpecialText, error) {
	return withHooks[*SpecialText, SpecialTextMutation](ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SpecialTextUpdateOne) SaveX(ctx context.Context) *SpecialText {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *SpecialTextUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SpecialTextUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stuo *SpecialTextUpdateOne) sqlSave(ctx context.Context) (_node *SpecialText, err error) {
	_spec := sqlgraph.NewUpdateSpec(specialtext.Table, specialtext.Columns, sqlgraph.NewFieldSpec(specialtext.FieldID, field.TypeInt))
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SpecialText.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, specialtext.FieldID)
		for _, f := range fields {
			if !specialtext.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != specialtext.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.Content(); ok {
		_spec.SetField(specialtext.FieldContent, field.TypeString, value)
	}
	_node = &SpecialText{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{specialtext.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
