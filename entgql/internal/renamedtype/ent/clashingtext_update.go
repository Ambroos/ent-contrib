// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/contrib/entgql/internal/renamedtype/ent/clashingtext"
	"entgo.io/contrib/entgql/internal/renamedtype/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClashingTextUpdate is the builder for updating ClashingText entities.
type ClashingTextUpdate struct {
	config
	hooks    []Hook
	mutation *ClashingTextMutation
}

// Where appends a list predicates to the ClashingTextUpdate builder.
func (ctu *ClashingTextUpdate) Where(ps ...predicate.ClashingText) *ClashingTextUpdate {
	ctu.mutation.Where(ps...)
	return ctu
}

// SetContent sets the "content" field.
func (ctu *ClashingTextUpdate) SetContent(s string) *ClashingTextUpdate {
	ctu.mutation.SetContent(s)
	return ctu
}

// Mutation returns the ClashingTextMutation object of the builder.
func (ctu *ClashingTextUpdate) Mutation() *ClashingTextMutation {
	return ctu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctu *ClashingTextUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ClashingTextMutation](ctx, ctu.sqlSave, ctu.mutation, ctu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctu *ClashingTextUpdate) SaveX(ctx context.Context) int {
	affected, err := ctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctu *ClashingTextUpdate) Exec(ctx context.Context) error {
	_, err := ctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctu *ClashingTextUpdate) ExecX(ctx context.Context) {
	if err := ctu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ctu *ClashingTextUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(clashingtext.Table, clashingtext.Columns, sqlgraph.NewFieldSpec(clashingtext.FieldID, field.TypeInt))
	if ps := ctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctu.mutation.Content(); ok {
		_spec.SetField(clashingtext.FieldContent, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clashingtext.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ctu.mutation.done = true
	return n, nil
}

// ClashingTextUpdateOne is the builder for updating a single ClashingText entity.
type ClashingTextUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClashingTextMutation
}

// SetContent sets the "content" field.
func (ctuo *ClashingTextUpdateOne) SetContent(s string) *ClashingTextUpdateOne {
	ctuo.mutation.SetContent(s)
	return ctuo
}

// Mutation returns the ClashingTextMutation object of the builder.
func (ctuo *ClashingTextUpdateOne) Mutation() *ClashingTextMutation {
	return ctuo.mutation
}

// Where appends a list predicates to the ClashingTextUpdate builder.
func (ctuo *ClashingTextUpdateOne) Where(ps ...predicate.ClashingText) *ClashingTextUpdateOne {
	ctuo.mutation.Where(ps...)
	return ctuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctuo *ClashingTextUpdateOne) Select(field string, fields ...string) *ClashingTextUpdateOne {
	ctuo.fields = append([]string{field}, fields...)
	return ctuo
}

// Save executes the query and returns the updated ClashingText entity.
func (ctuo *ClashingTextUpdateOne) Save(ctx context.Context) (*ClashingText, error) {
	return withHooks[*ClashingText, ClashingTextMutation](ctx, ctuo.sqlSave, ctuo.mutation, ctuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctuo *ClashingTextUpdateOne) SaveX(ctx context.Context) *ClashingText {
	node, err := ctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctuo *ClashingTextUpdateOne) Exec(ctx context.Context) error {
	_, err := ctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctuo *ClashingTextUpdateOne) ExecX(ctx context.Context) {
	if err := ctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ctuo *ClashingTextUpdateOne) sqlSave(ctx context.Context) (_node *ClashingText, err error) {
	_spec := sqlgraph.NewUpdateSpec(clashingtext.Table, clashingtext.Columns, sqlgraph.NewFieldSpec(clashingtext.FieldID, field.TypeInt))
	id, ok := ctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ClashingText.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clashingtext.FieldID)
		for _, f := range fields {
			if !clashingtext.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != clashingtext.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctuo.mutation.Content(); ok {
		_spec.SetField(clashingtext.FieldContent, field.TypeString, value)
	}
	_node = &ClashingText{config: ctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clashingtext.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ctuo.mutation.done = true
	return _node, nil
}
